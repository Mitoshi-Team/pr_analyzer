services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend/model:/app/model
    ports:
      - "${BACKEND_PORT}:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      vllm:
        condition: service_started
    networks:
      - app-network

  vllm:
    image: vllm/vllm-openai:latest
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ./backend/model:/root/.cache/huggingface
    ports:
      - "8020:8000"
    environment:
      - HUGGING_FACE_HUB_TOKEN=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
      - HF_HUB_ENABLE_HF_TRANSFER=0
    command: >
      --model ${MODEL_NAME}
      --quantization awq_marlin
    ipc: host
    networks:
      - app-network

  proxy:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    command: -p ${DB_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -p ${DB_PORT}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: